setwd("/home/thomas/Downloads/dataverse_files")
library(tidyverse)
data <- read_csv("metadata.csv")
data
data <- read_csv("metadata.csv")
data <- read.csv("metadata.csv")
setwd("~/Downloads/dataverse_files")
setwd("~/Downloads/dataverse_files")
library(tidyverse)
data <- read.csv("metadata.csv")
data <- read.csv("2_Metadataset_Abel_Biograms.csv")
data
head(data)
names(data)
table(data$Geschlecht)
table(data$Alter)
table(data$Geburtsdatum)
table(year(data$Geburtsdatum))
library(lubridate)
table(year(data$Geburtsdatum))
table(year(as.date(data$Geburtsdatum)))
table(year(as.Date(data$Geburtsdatum)))
table(year(as.character.Date(data$Geburtsdatum)))
table(year(dmy(data$Geburtsdatum)))
plot(table(year(dmy(data$Geburtsdatum))))
plot(table(year(dmy(data$Geburtsdatum)) - 1934 ))
plot(table(1934 - year(dmy(data$Geburtsdatum))))
median(1934 - year(dmy(data$Geburtsdatum)))
mean(1934 - year(dmy(data$Geburtsdatum)))
1934 - year(dmy(data$Geburtsdatum))
mean(c(1934 - year(dmy(data$Geburtsdatum))))
?mean
mean(c(1934 - year(dmy(data$Geburtsdatum))), na.rm = TRUE)
median(c(1934 - year(dmy(data$Geburtsdatum))), na.rm = TRUE)
median(c(1934 - year(dmy(data$Geburtsdatum))), na.rm = TRUE)
data <- data %>%
mutate(Alter = 1934 - year(dmy(Geburtsdatum)))
data$Geburtsdatum
data$Alter
median(c(1934 - year(dmy(data$Geburtsdatum))), na.rm = TRUE)
data1 <- data %>%
filter(Alter < 36)
data2 <- data %>%
filter(Alter >= 36)
data1$Mitgliedsnummer
data1$BriefID
data2$BriefID
library(stringi)
library(quanteda)
read_rtf_to_text <- function(filepath) {
rtf_content <- stri_read_rtf(filepath)
return(rtf_content)
}
id_set_1 <- data1$BriefID
id_set_2 <- data2$BriefID
rtf_dir <- "./0_Biograms"
rtf_files <- list.files(path = rtf_dir, pattern = "\\.rtf$", full.names = TRUE)
filter_files_by_id <- function(files, id_set) {
pattern <- paste0(id_set, collapse = "|") # Create a regex pattern that matches any ID in the set
matched_files <- grep(pattern, files, value = TRUE)
return(matched_files)
}
files_set_1 <- filter_files_by_id(rtf_files, id_set_1)
files_set_2 <- filter_files_by_id(rtf_files, id_set_2)
text_set_1 <- sapply(files_set_1, read_rtf_to_text, USE.NAMES = FALSE)
library(stringi)
text_set_1 <- sapply(files_set_1, read_rtf_to_text, USE.NAMES = FALSE)
setwd("~/Downloads/dataverse_files")
library(tidyverse)
library(stringi)
library(quanteda)
data <- read.csv("2_Metadataset_Abel_Biograms.csv")
head(data)
names(data)
table(data$Geschlecht)
plot(table(1934 - year(dmy(data$Geburtsdatum))))
median(c(1934 - year(dmy(data$Geburtsdatum))), na.rm = TRUE)
data <- data %>%
mutate(Alter = 1934 - year(dmy(Geburtsdatum)))
data1 <- data %>%
filter(Alter < 36)
data2 <- data %>%
filter(Alter >= 36)
# create 2 corpora ----
read_rtf_to_text <- function(filepath) {
rtf_content <- stri_read_rtf(filepath)
return(rtf_content)
}
id_set_1 <- data1$BriefID
id_set_2 <- data2$BriefID
rtf_dir <- "./0_Biograms"
rtf_files <- list.files(path = rtf_dir, pattern = "\\.rtf$", full.names = TRUE)
filter_files_by_id <- function(files, id_set) {
pattern <- paste0(id_set, collapse = "|") # Create a regex pattern that matches any ID in the set
matched_files <- grep(pattern, files, value = TRUE)
return(matched_files)
}
files_set_1 <- filter_files_by_id(rtf_files, id_set_1)
files_set_2 <- filter_files_by_id(rtf_files, id_set_2)
text_set_1 <- sapply(files_set_1, read_rtf_to_text, USE.NAMES = FALSE)
library(textreadr)
install.packages("textreadr")
library(striprtf)
read_rtf_to_text <- function(filepath) {
rtf_content <- read_rtf(filepath)
return(rtf_content)
}
text_set_1 <- sapply(files_set_1, read_rtf_to_text, USE.NAMES = FALSE)
text_set_2 <- sapply(files_set_2, read_rtf_to_text, USE.NAMES = FALSE)
corpus_1 <- corpus(text_set_1)
save.image("~/Downloads/dataverse_files/environmentsave.RData")
x <- unlist(strsplit(text_set_1[1], " "))
x <- unlist(text_set_1)
x
rm(x)
corpus_1 <- corpus(unlist(text_set_1))
corpus_2 <- corpus(unlist(text_set_2))
save.image("~/Downloads/dataverse_files/environmentsave.RData")
library(quanteda.textstats)
library(quanteda.textplots)
library(quanteda.textmodels)
library(striprtf)
toks1 <- tokens(corpus_1, remove_punct = TRUE)
dfm1 <- dfm(toks1)
dfm1 <- dfm_remove(dfm1, pattern = stopwords("de"))
dfm1 <- dfm_trim(dfm1, min_termfreq = 100)
topfeatures(dfm1)
fcm1 <- fcm(dfm1)
dim(fcm1)
topfeatures(fcm1)
feat1 <- names(topfeatures(fcm1, 50))
fcm1_select <- fcm_select(fcm1, pattern = feat1, selection = "keep")
dim(fcm1_select)
size1 <- log(colSums(dfm_select(dfm1, feat1, selection = "keep")))
set.seed(123)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size / max(size) * 3)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size) * 3)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size1) * 3)
dfm1 <- dfm_trim(dfm1, min_termfreq = 150)
topfeatures(dfm1)
fcm1 <- fcm(dfm1)
dim(fcm1)
topfeatures(fcm1)
feat1 <- names(topfeatures(fcm1, 50))
fcm1_select <- fcm_select(fcm1, pattern = feat1, selection = "keep")
dim(fcm1_select)
size1 <- log(colSums(dfm_select(dfm1, feat1, selection = "keep")))
set.seed(123)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size1) * 3)
toks1 <- tokens(corpus_1, remove_punct = TRUE)
dfm1 <- dfm(toks1)
dfm1 <- dfm_remove(dfm1, pattern = stopwords("de"))
dfm1 <- dfm_trim(dfm1, min_termfreq = 200)
topfeatures(dfm1)
fcm1 <- fcm(dfm1)
dim(fcm1)
topfeatures(fcm1)
feat1 <- names(topfeatures(fcm1, 50))
fcm1_select <- fcm_select(fcm1, pattern = feat1, selection = "keep")
dim(fcm1_select)
size1 <- log(colSums(dfm_select(dfm1, feat1, selection = "keep")))
set.seed(123)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size1) * 3)
toks1 <- tokens(corpus_1, remove_punct = TRUE)
dfm1 <- dfm(toks1)
dfm1 <- dfm_remove(dfm1, pattern = stopwords("de"))
dfm1 <- dfm_trim(dfm1, min_termfreq = 300)
topfeatures(dfm1)
fcm1 <- fcm(dfm1)
dim(fcm1)
topfeatures(fcm1)
feat1 <- names(topfeatures(fcm1, 50))
fcm1_select <- fcm_select(fcm1, pattern = feat1, selection = "keep")
dim(fcm1_select)
size1 <- log(colSums(dfm_select(dfm1, feat1, selection = "keep")))
set.seed(123)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size1) * 3)
toks1 <- tokens(corpus_1, remove_punct = TRUE)
dfm1 <- dfm(toks1)
dfm1 <- dfm_remove(dfm1, pattern = stopwords("de"))
dfm1 <- dfm_trim(dfm1, min_termfreq = 350)
topfeatures(dfm1)
fcm1 <- fcm(dfm1)
dim(fcm1)
topfeatures(fcm1)
feat1 <- names(topfeatures(fcm1, 50))
fcm1_select <- fcm_select(fcm1, pattern = feat1, selection = "keep")
dim(fcm1_select)
size1 <- log(colSums(dfm_select(dfm1, feat1, selection = "keep")))
set.seed(123)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size1) * 3)
toks1 <- tokens(corpus_1, remove_punct = TRUE)
dfm1 <- dfm(toks1)
dfm1 <- dfm_remove(dfm1, pattern = stopwords("de"))
dfm1 <- dfm_trim(dfm1, min_termfreq = 375)
topfeatures(dfm1)
fcm1 <- fcm(dfm1)
dim(fcm1)
topfeatures(fcm1)
feat1 <- names(topfeatures(fcm1, 50))
fcm1_select <- fcm_select(fcm1, pattern = feat1, selection = "keep")
dim(fcm1_select)
size1 <- log(colSums(dfm_select(dfm1, feat1, selection = "keep")))
set.seed(123)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size1) * 3)
toks1 <- tokens(corpus_1, remove_punct = TRUE)
dfm1 <- dfm(toks1)
dfm1 <- dfm_remove(dfm1, pattern = stopwords("de"))
dfm1 <- dfm_trim(dfm1, min_termfreq = 360)
topfeatures(dfm1)
fcm1 <- fcm(dfm1)
dim(fcm1)
topfeatures(fcm1)
feat1 <- names(topfeatures(fcm1, 50))
fcm1_select <- fcm_select(fcm1, pattern = feat1, selection = "keep")
dim(fcm1_select)
size1 <- log(colSums(dfm_select(dfm1, feat1, selection = "keep")))
set.seed(123)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size1) * 3)
toks1 <- tokens(corpus_1, remove_punct = TRUE)
dfm1 <- dfm(toks1)
dfm1 <- dfm_remove(dfm1, pattern = stopwords("de"))
dfm1 <- dfm_trim(dfm1, min_termfreq = 300)
topfeatures(dfm1)
fcm1 <- fcm(dfm1)
dim(fcm1)
topfeatures(fcm1)
feat1 <- names(topfeatures(fcm1, 50))
fcm1_select <- fcm_select(fcm1, pattern = feat1, selection = "keep")
dim(fcm1_select)
size1 <- log(colSums(dfm_select(dfm1, feat1, selection = "keep")))
set.seed(123)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size1) * 3)
toks1 <- tokens(corpus_1, remove_punct = TRUE)
dfm1 <- dfm(toks1)
dfm1 <- dfm_remove(dfm1, pattern = stopwords("de"))
dfm1 <- dfm_trim(dfm1, min_termfreq = 200)
topfeatures(dfm1)
fcm1 <- fcm(dfm1)
dim(fcm1)
topfeatures(fcm1)
feat1 <- names(topfeatures(fcm1, 50))
fcm1_select <- fcm_select(fcm1, pattern = feat1, selection = "keep")
dim(fcm1_select)
size1 <- log(colSums(dfm_select(dfm1, feat1, selection = "keep")))
set.seed(123)
textplot_network(fcm1, min_freq = 0.8, vertex_size = size1 / max(size1) * 3)
